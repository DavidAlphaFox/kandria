(in-package #:org.shirakumo.fraf.leaf)

(define-subject camera (trial:2d-camera)
  ((flare:name :initform :camera)
   (zoom :initarg :zoom :initform 1.0 :accessor zoom)
   (scale :initform 1.0 :accessor view-scale)
   (target-size :initarg :target-size :accessor target-size)
   (target :initarg :target :initform NIL :accessor target)
   (surface :initform NIL :accessor surface)
   (shake-counter :initform 0 :accessor shake-counter))
  (:default-initargs
   :location (vec 0 0)
   :target-size (vec (* 8 30) 0)))

(defmethod enter :after ((camera camera) (scene scene))
  (setf (target camera) (unit :player scene))
  (setf (surface camera) (unit :surface scene)))

(define-handler (camera trial:tick) (ev)
  (let ((loc (location camera))
        (surface (surface camera))
        (size (target-size camera)))
    (unless (active-p (unit :editor +level+))
      (when (target camera)
        (let ((tar (location (target camera))))
          (vsetf loc (vx tar) (vy tar))
          (nv- loc (target-size camera))))
      (when surface
        (setf (vx loc) (clamp (- (vx (location surface))
                                 (vx (bsize surface)))
                              (vx loc)
                              (+ (vx (location surface))
                                 (vx (bsize surface))
                                 (- (vx size)))))
        (setf (vy loc) (clamp (- (vy (location surface))
                                 (vy (bsize surface)))
                              (vy loc)
                              (+ (vy (location surface))
                                 (vy (bsize surface))
                                 (- (vy size)))))))
    (when (< 0 (shake-counter camera))
      (decf (shake-counter camera))
      (nv+ loc (vrand -3 +3)))))

(defmethod (setf zoom) :after (zoom (camera camera))
  (setf (view-scale camera) (* (float (/ (width *context*) (* 2 (vx (target-size camera)))))
                               (zoom camera))))

(define-handler (camera resize) (ev)
  (setf (view-scale camera) (* (float (/ (width ev) (* 2 (vx (target-size camera)))))
                               (zoom camera)))
  (setf (vy (target-size camera)) (/ (height ev) (view-scale camera) 2)))

(defmethod project-view ((camera camera) ev)
  (let ((z (view-scale camera)))
    (reset-matrix *view-matrix*)
    (scale-by z z z *view-matrix*)
    (translate (nv- (vxy_ (location camera))) *view-matrix*)))
