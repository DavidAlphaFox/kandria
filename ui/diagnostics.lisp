(in-package #:org.shirakumo.fraf.leaf)

#+windows
(progn
  (cffi:defcstruct (io-counters :conc-name io-counters-)
    (reads :ulonglong)
    (writes :ulonglong)
    (others :ulonglong)
    (read-bytes :ulonglong)
    (write-bytes :ulonglong)
    (other-bytes :ulonglong))
  (cffi:defcfun (current-process "GetCurrentProcess") :pointer)
  (cffi:defcfun (process-io-counters "GetProcessIoCounters") :bool
    (process :pointer)
    (counters :pointer))

  (defun io-bytes ()
    (cffi:with-foreign-object (io-counters '(:struct io-counters))
      (process-io-counters (current-process) io-counters)
      (+ (io-counters-read-bytes io-counters)
         (io-counters-write-bytes io-counters)
         (io-counters-other-bytes io-counters)))))

#+linux
(progn
  (cffi:defcstruct timeval
    (a :uint64)
    (b :uint64))
  (cffi:defcstruct (rusage :conc-name rusage-)
    (utime (:struct timeval))
    (stime (:struct timeval))
    (maxrss :long)
    (ixrss :long)
    (idrss :long)
    (isrss :long)
    (minflt :long)
    (majflt :long)
    (nswap :long)
    (inblock :long)
    (oublock :long)
    (msgsnd :long)
    (msgrcv :long)
    (nsignals :long)
    (nvcsw :long)
    (nivcsw :long))
  (cffi:defcfun (rusage "getrusage") :int
    (who :int)
    (struct :pointer))
  (defun io-bytes ()
    (cffi:with-foreign-object (rusage '(:struct rusage))
      (rusage 0 rusage)
      (+ (rusage-inblock rusage)
         (rusage-oublock rusage)))))

(defclass diagnostics (panel alloy:observable-object)
  ((fps :initform (make-array 600 :initial-element 0.0 :element-type 'single-float))
   (ram :initform (make-array 600 :initial-element 0.0 :element-type 'single-float))
   (vram :initform (make-array 600 :initial-element 0.0 :element-type 'single-float))
   (io :initform (make-array 600 :initial-element 0.0 :element-type 'single-float))
   (last-io :initform 0)))

(defmethod initialize-instance :after ((panel diagnostics) &key)
  (let ((layout (make-instance 'org.shirakumo.alloy.layouts.constraint:layout))
        (fps (alloy:represent (slot-value panel 'fps) 'alloy:plot
                              :y-range '(1 . 60) :style `((:curve :line-width ,(alloy:un 2)))))
        (ram (alloy:represent (slot-value panel 'ram) 'alloy:plot
                              :y-range `(0 . ,(nth-value 1 (cpu-room))) :style `((:curve :line-width ,(alloy:un 2)))))
        (vram (alloy:represent (slot-value panel 'vram) 'alloy:plot
                               :y-range `(0 . ,(nth-value 1 (gpu-room))) :style `((:curve :line-width ,(alloy:un 2)))))
        (io (alloy:represent (slot-value panel 'io) 'alloy:plot
                             :y-range `(0 . ,#+windows (expt 1024 2) #+linux 100) :style `((:curve :line-width ,(alloy:un 2))))))
    (alloy:enter fps layout :constraints `((:size 300 150) (:left 10) (:top 10)))
    (alloy:enter ram layout :constraints `((:size 300 150) (:left 10) (:below ,fps 10)))
    (alloy:enter vram layout :constraints `((:size 300 150) (:left 10) (:below ,ram 10)))
    (alloy:enter io layout :constraints `((:size 300 150) (:left 10) (:below ,vram 10)))
    (alloy:enter "FPS" layout :constraints `((:size 100 20) (:inside ,fps :halign :left :valign :top :margin 5)))
    (alloy:enter "RAM" layout :constraints `((:size 100 20) (:inside ,ram :halign :left :valign :top :margin 5)))
    (alloy:enter "VRAM" layout :constraints `((:size 100 20) (:inside ,vram :halign :left :valign :top :margin 5)))
    (alloy:enter "IO" layout :constraints `((:size 100 20) (:inside ,io :halign :left :valign :top :margin 5)))
    (alloy:finish-structure panel layout NIL)))

(defmethod handle ((ev tick) (panel diagnostics))
  (with-slots (fps ram vram io last-io) panel
    (flet ((push-value (value array)
             (declare (type (simple-array single-float (*)) array))
             (loop for i from 1 below (length array)
                   do (setf (aref array (1- i)) (aref array i)))
             (setf (aref array (1- (length array))) (float value 1f0))))
      (let ((frame-time (frame-time (handler *context*))))
        (push-value (if (= 0 frame-time) 1 (/ frame-time)) fps))
      (alloy:notify-observers 'fps panel fps panel)
      (multiple-value-bind (free total) (cpu-room)
        (push-value (- total free) ram))
      (alloy:notify-observers 'ram panel ram panel)
      (multiple-value-bind (free total) (gpu-room)
        (push-value (- total free) vram))
      (alloy:notify-observers 'vram panel vram panel)
      (let ((total (io-bytes)))
        (when (< 0 last-io)
          (push-value (- total last-io) io))
        (setf last-io total))
      (alloy:notify-observers 'io panel io panel))))
