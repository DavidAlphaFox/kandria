# Leaf Region File Format
This document is the specification for Leaf's region file format. The format is defined by a combination of textual and ADL descriptions. A more formal definition of ADL can be found in the "adl"(link adl.mess) file.

## Container
The region file format is represented through a multitude of files or entries in a hierarchical structure. This may be a directory, a zip archive, or anything similar that can store named binary blobs. In any case, the container must have a ``meta.lisp`` entry at its toplevel. If the ``meta.lisp`` entry is missing or malformed, the packet is considered invalid.

## Metadata
The ``meta.lisp`` entry must contain data as follows, encoded in standard s-expression format.

:: ADL
file: [ header, information ]

header: {
  identifier: symbol,
  version: symbol
}

information: {
  author: string,
  version: string,
  description: string,
  preview: _pathname
}
::

The ``identifier`` must always be the symbol ``leaf:region``. The ``version`` in the ``header`` must be a symbol designating a subclass of ``leaf:version``.

The ``preview``, if not ``null``, must name an entry in the packet.

## Data Payload
The contents of the packet otherwise are version dependent. The following subsections define the format for each version.

### ``v0``
The packet must contain an entry named ``data`` at the top level. The contents are encoded in standard s-expression format with the following data structure.

:: ADL
scene: {
  name: symbol,
  entities: [ entity ]
}

entity: ( player | chunk | instance )

player: {
  location: vector
}

chunk: {
  name: symbol,
  location: vector,
  size: vector,
  background: asset,
  tileset: asset,
  layers: [ pathname ]
}

instance: {
  class: symbol,
  initargs: [ initarg ]
}

initarg: [ symbol, T ]

asset: {
  pool: symbol,
  name: symbol
}

vector: {
  x: real,
  y: real
}
::

Each of the ``pathname``s in the data must point to an entry in the packet.
